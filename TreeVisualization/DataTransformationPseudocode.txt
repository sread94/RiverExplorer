Create the JSON string:

	/******find the number of nodes*****/

	String theJSON = "{ numNodes: ";
	Find the total number of nodes by finding the number of lines in the file
	int numEntries = numLines -1; //because the header does not count
	theJSON += numEntries;

	/******find all node labels*****/

	theJSON += ", nodeLabels: [";
	create array of all edgeIds by reading each line
	for(i=0; i<numEntries; i++){
		if(i!=numEntries -1){
			theJSON += edgeIdArr[i] + ", "
		}
		else{
			theJSON += edgeIdArr[i];
		}
	}
	theJSON += "]";

	/******find all node values******/

	theJSON += ", vals: ";
	create array of all vals by reading each line
	for(i=0; i<numEntries; i++){
		if(i!=numEntries -1){
			theJSON += valArr[i] + ", "
		}
		else{
			theJSON += valArr[i];
		}
	}
	theJSON += "]";

	/******find all probabilities between nodes******/

	theJSON += ", probBtwNodes: [";
	Create a set of adjacent nodes:
		for each node it's neighbors from_node = it's to_node
		search to find all pairs
		order does not matter in this case. 1 node pair only exists once
	for(int i = 0; i < adjacentNodesList.size; i++){
		find prob from 1st to 2nd
		String tempString = "[" + adjacentNodesList[i][0] + ", " + 
				adjacentNodesList[i][1] + ", " + prob12 + "], ";

		theJSON += tempString;
		find prob from 2nd to 1st
		tempString = "[" + adjacentNodesList[i][0] + ", " + 
				adjacentNodesList[i][1] + ", " + prob12+ "] ";

		if( i != adjacentNodesList.size){
			tempString += ", ";
		}
		theJSON += tempString;
	}
	theJSON += "]}";
